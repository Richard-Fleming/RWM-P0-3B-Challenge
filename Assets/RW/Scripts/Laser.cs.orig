/*
 * Copyright (c) 2019 Razeware LLC
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Notwithstanding the foregoing, you may not use, copy, modify, merge, publish, 
 * distribute, sublicense, create a derivative work, and/or sell copies of the 
 * Software in any work that is designed, intended, or marketed for pedagogical or 
 * instructional purposes related to programming, coding, application development, 
 * or information technology.  Permission for such use, copying, modification,
 * merger, publication, distribution, sublicensing, creation of derivative works, 
 * or sale is expressly withheld.
 *    
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Laser : MonoBehaviour
{
    [SerializeField]
    private Spawner spawner;
    [SerializeField]
    private int shrapnelAmount = 4;
    [SerializeField]
    private int shrapnelForce = 5;
<<<<<<< HEAD
    [SerializeField]
    private GameObject laser;
=======
>>>>>>> f75978f (added shrapnel)

    public bool isShrapnel;
    private Game game;




	void Update ()
    {
        transform.Translate(Vector3.back * Time.deltaTime * 5);
        if (transform.position.y > 10)
        {
            Destroy(gameObject);
        }
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.GetComponent<Asteroid>() != null)
        {
            Game.AsteroidDestroyed();
            Destroy(gameObject);
            spawner.asteroids.Remove(collision.gameObject);
            Destroy(collision.gameObject);

            if(isShrapnel)
            {
                for (int i = 0; i < shrapnelAmount; i++)
                {
<<<<<<< HEAD
                    spawnShrapnel();
=======
                    GameObject newLaser = Instantiate(this.gameObject);
                    float rx = Random.Range(-1f, 1f);
                    float ry = Random.Range(-1f, 1f);
                    Vector3 randomDir = new Vector3(rx, ry ,0);
                    newLaser.transform.position = newLaser.transform.position +(1.2f * randomDir);
                    newLaser.GetComponent<Rigidbody>().AddForce(randomDir * shrapnelForce, ForceMode.Impulse);
                    newLaser.GetComponent<Laser>().isShrapnel = false;
>>>>>>> f75978f (added shrapnel)
                }
            }
        }
    }

    public void spawnShrapnel()
    {
        GameObject newLaser = Instantiate(laser);
        Game.AddShrapnel();
        float rx = Random.Range(-1f, 1f);
        float ry = Random.Range(-1f, 1f);
        Vector3 randomDir = new Vector3(rx, ry ,0);
        newLaser.transform.position = newLaser.transform.position +(1.2f * randomDir);
        newLaser.GetComponent<Rigidbody>().AddForce(randomDir * shrapnelForce, ForceMode.Impulse);
        newLaser.GetComponent<Laser>().isShrapnel = false;
    }
}
